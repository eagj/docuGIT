(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{397:function(a,e,r){"use strict";r.r(e);var o=r(54),i=Object(o.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[a._v("#")]),a._v(" GIT")]),a._v(" "),r("h2",{attrs:{id:"loguearse"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#loguearse"}},[a._v("#")]),a._v(" Loguearse")]),a._v(" "),r("p",[a._v("El logueo es simplemente un proceso para ver quien es el que ha hecho cambios. No hay que crear una cuenta previamente, simplemente usar estos dos comandos para poner nuestro nombre y nuestro email. "),r("strong",[a._v("Este proceso hay que hacerlo en cada ordenador que trabajemos")]),a._v(".")]),a._v(" "),r("ul",[r("li",[r("code",[a._v('git config --global user.name "nombrededeusuario"')])])]),a._v(" "),r("p",[a._v("Decimos cual es nuestro nombre de usuario en "),r("strong",[a._v("esta maquina")]),a._v(".")]),a._v(" "),r("ul",[r("li",[r("code",[a._v('git config --global user.email "emaildedeusuario"')])])]),a._v(" "),r("p",[a._v("Decimos cual es nuestro nombre de usuario en "),r("strong",[a._v("esta maquina")]),a._v(".")]),a._v(" "),r("h2",{attrs:{id:"inicializar-servidor-git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#inicializar-servidor-git"}},[a._v("#")]),a._v(" Inicializar servidor GIT")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git init")])])]),a._v(" "),r("p",[a._v("Esto crea un subdirectorio nuevo llamado .git, el cual contiene todos los archivos necesarios del repositorio – un esqueleto de un repositorio de Git. Todavía no hay nada en tu proyecto que esté bajo seguimiento.")]),a._v(" "),r("h2",{attrs:{id:"anadir-archivo-s-al-repositorio"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#anadir-archivo-s-al-repositorio"}},[a._v("#")]),a._v(" Añadir archivo/s al repositorio")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git add <nombre_archivo>")])])]),a._v(" "),r("p",[a._v("Añade el archivo “nombre_archivo” al proyecto.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git add .")])])]),a._v(" "),r("p",[a._v("Añade TODOS los archivos del proyecto")]),a._v(" "),r("h2",{attrs:{id:"subir-repositorio"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#subir-repositorio"}},[a._v("#")]),a._v(" Subir repositorio")]),a._v(" "),r("ul",[r("li",[r("code",[a._v('git commit -m "nombre de la subida"')])])]),a._v(" "),r("p",[a._v("De este modo subimos todos los cambios realizados y/o que esten añadidos (add). El nombre de la subida es una descripción de lo que se ha hecho para poder acceder o consultar en un futuro.")]),a._v(" "),r("h2",{attrs:{id:"clonar-repositorio"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#clonar-repositorio"}},[a._v("#")]),a._v(" Clonar repositorio")]),a._v(" "),r("ul",[r("li",[r("code",[a._v('git clone "https://github.com/nombreproyecto.git"')])])]),a._v(" "),r("h2",{attrs:{id:"revertir-cambios"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#revertir-cambios"}},[a._v("#")]),a._v(" Revertir cambios")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git checkout -- <nombre archivo>")])])]),a._v(" "),r("h2",{attrs:{id:"comprobar-estado-actual-de-la-rama-sin-commit"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#comprobar-estado-actual-de-la-rama-sin-commit"}},[a._v("#")]),a._v(" Comprobar estado actual de la rama sin commit")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git status")])])]),a._v(" "),r("h2",{attrs:{id:"crear-rama-branch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#crear-rama-branch"}},[a._v("#")]),a._v(" Crear rama (branch)")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git branch -M <nombrederama>")])])]),a._v(" "),r("h2",{attrs:{id:"cambiar-de-rama"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cambiar-de-rama"}},[a._v("#")]),a._v(" cambiar de rama")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git checkout <nombrederama>")])])]),a._v(" "),r("hr"),a._v(" "),r("ul",[r("li",[r("code",[a._v("git fetch")])])]),a._v(" "),r("p",[a._v("Descarga los cambios realizados en el repositorio remoto.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git merge <nombre_rama>")])])]),a._v(" "),r("p",[a._v("Impacta en la rama en la que te encuentras parado, los cambios realizados en la rama “nombre_rama”.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git pull")])])]),a._v(" "),r("p",[a._v("Unifica los comandos fetch y merge en un único comando.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git push origin <nombre_rama>")])])]),a._v(" "),r("p",[a._v("Sube la rama “nombre_rama” al servidor remoto.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git checkout -b <nombre_rama_nueva>")])])]),a._v(" "),r("p",[a._v("Crea una rama a partir de la que te encuentres parado con el nombre “nombre_rama_nueva”, y luego salta sobre la rama nueva, por lo que quedas parado en esta última.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git checkout -t origin/<nombre_rama>")])])]),a._v(" "),r("p",[a._v("Si existe una rama remota de nombre “nombre_rama”, al ejecutar este comando se crea una rama local con el nombre “nombre_rama” para hacer un seguimiento de la rama remota con el mismo nombre.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git branch")])])]),a._v(" "),r("p",[a._v("Lista todas las ramas locales.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git branch -a")])])]),a._v(" "),r("p",[a._v("Lista todas las ramas locales y remotas.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git branch -d <nombre_rama>")])])]),a._v(" "),r("p",[a._v("Elimina la rama local con el nombre “nombre_rama”.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git push origin <nombre_rama>")])])]),a._v(" "),r("p",[a._v("Commitea los cambios desde el branch local origin al branch “nombre_rama”.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git remote prune origin")])])]),a._v(" "),r("p",[a._v("Actualiza tu repositorio remoto en caso que algún otro desarrollador haya eliminado alguna rama remota.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git reset --hard HEAD")])])]),a._v(" "),r("p",[a._v("Elimina los cambios realizados que aún no se hayan hecho commit.")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("git revert <hash_commit>")])])]),a._v(" "),r("p",[a._v("Revierte el commit realizado, identificado por el “hash_commit”.")])])}),[],!1,null,null,null);e.default=i.exports}}]);